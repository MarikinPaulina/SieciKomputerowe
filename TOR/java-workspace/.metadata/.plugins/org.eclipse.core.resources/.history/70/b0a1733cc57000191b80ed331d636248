import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketTimeoutException;
import java.util.ArrayList;

import org.json.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;

public class Nodes {
	static int PORT = 9999;
	static int BUFFER_SIZE = 256;
	
	public static void main(String[] args) throws Exception{
		JSONParser parser = new JSONParser();
		ArrayList<InetAddress> inetAddress = new ArrayList<InetAddress>();
		ArrayList<Integer> ports = new ArrayList<Integer>();

        DatagramSocket datagramSocket = new DatagramSocket(PORT);

        byte[] byteResponse;

        while (true){

            DatagramPacket receivedPacket = new DatagramPacket( new byte[BUFFER_SIZE], BUFFER_SIZE);

            datagramSocket.receive(receivedPacket);

            int length = receivedPacket.getLength(); 
            
            String message;
            String messageReceived = new String(receivedPacket.getData(), 0, length, "utf8");
            inetAddress.add( receivedPacket.getAddress() );
            ports.add( receivedPacket.getPort() );
            
            Object obj = parser.parse(messageReceived);
            JSONArray array = (JSONArray)obj;
            JSONObject obj2 = (JSONObject)array.get(1);
            
            if(array.get(0)) {
	            ArrayList<InetAddress> addressesList = new ArrayList<InetAddress>();
	            addressesList = (ArrayList<InetAddress>)obj2.get("addresses");
	            InetAddress address = (InetAddress)obj2.get("address");
	            int port = (int)obj2.get("port");
	            if(addressesList.size() > 0) {
	            	InetAddress nextAddress = addressesList.remove(0);
	            	obj2.put("address", nextAddress);
	                obj2.put("addresses", addressesList);
	                array.set(1, obj2);
	                Object json = (Object)array;
	                byteResponse = json.toString().getBytes("utf8");
	                DatagramPacket response = new DatagramPacket(byteResponse, byteResponse.length, address, port);
	                datagramSocket.send(response);
	            }else {
	            	System.out.print(obj2.get("message"));
	            	obj2.put("message", "odebrano");
	            	obj2.put("address", inetAddress.remove(inetAddress.size()-1));
	            	obj2.put("port", ports.remove(ports.size()-1));
	            	array.set(0, 0);
	            	array.set(1, obj2);
	            }
            }else {
            	
            }
            
            Thread.sleep(1000); //To oczekiwanie nie jest potrzebne dla
            // obs≈Çugi gniazda

            //DatagramPacket response= new DatagramPacket(byteResponse, byteResponse.length, address, port);

            //datagramSocket.send(response);
        }
    }
}

